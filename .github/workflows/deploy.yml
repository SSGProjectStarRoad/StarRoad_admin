name: CI/CD Pipeline

on:
  push:
    branches:
      - main # main 브랜치로의 푸시 시 트리거
  pull_request:
    branches:
      - main # main 브랜치로의 풀 리퀘스트 시 트리거

env:
  DOCKER_IMAGE_NAME: jjuuuunn/starroad-admin-app # Docker 이미지 이름

jobs:
  build:
    runs-on: ubuntu-latest # 최신 Ubuntu 이미지에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 # 코드를 체크아웃하는 GitHub 액션 사용

      - name: JDK 17 셋업
        uses: actions/setup-java@v2 # JDK 설정을 위한 GitHub 액션 사용
        with:
          distribution: 'temurin' # Temurin JDK 사용
          java-version: '17' # Java 17 사용

      - name: Application properties 생성
        run: |
          touch ./src/main/resources/application.properties
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
          cat ./src/main/resources/application.properties      

      - name: Gradle 캐시 설정
        uses: actions/cache@v2 # Gradle 패키지 캐시를 위한 GitHub 액션 사용
        with:
          path: ~/.gradle/caches # 캐시 경로 설정
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }} # 캐시 키 설정
          restore-keys: ${{ runner.os }}-gradle # 캐시 복구 키 설정

      - name: gradlew 파일 실행 권한 부여
        run: chmod +x gradlew

      - name: 테스트 제외한 Gradle 빌드 실행
        run: ./gradlew build -x test # 테스트를 제외한 Gradle 빌드 실행

      - name: Docker 빌드 환경 설정
        uses: docker/setup-buildx-action@v1

      - name: Docker Hub 로그인
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest . 
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


  deploy:
    runs-on: ubuntu-latest # 최신 Ubuntu 이미지에서 실행
    needs: build # build 작업이 성공적으로 완료되면 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: NCP 서버에 Docker 이미지 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            docker stop StarRoad_admin || true
            docker rm StarRoad_admin || true
            docker run -d -p 8082:8080 --name StarRoad_admin ${{ env.DOCKER_IMAGE_NAME }}:latest 
